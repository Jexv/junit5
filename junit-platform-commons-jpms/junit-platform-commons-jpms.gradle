repositories {
	maven { url 'https://plugins.gradle.org/m2/' }
	maven { url 'https://jitpack.io' }
}

dependencies {
	compile 'org.apiguardian:apiguardian-api:1.0.0'
	compile 'org.opentest4j:opentest4j:1.0.0'

	// TODO Replace jitpack coordinates with local project references after merging "module" branch
	compile 'com.github.junit-team.junit5:junit-platform-commons:module-SNAPSHOT'
	compile 'com.github.junit-team.junit5:junit-platform-console:module-SNAPSHOT'
	compile 'com.github.junit-team.junit5:junit-platform-engine:module-SNAPSHOT'
	compile 'com.github.junit-team.junit5:junit-platform-launcher:module-SNAPSHOT'
	compile 'com.github.junit-team.junit5:junit-jupiter-api:module-SNAPSHOT'
	compile 'com.github.junit-team.junit5:junit-jupiter-engine:module-SNAPSHOT'
}

// enable on your own risk: issues with Java 9, Gradle and others...
checkstyleMain.enabled = false
checkstyleTest.enabled = false
degraph.enabled = false
javadoc.enabled = false
test.enabled = false // replaced by `testSameModule` and `testIntegration`

//
// define global properties
//
ext.moduleName = 'org.junit.platform.commons.jpms'
ext.externalDependencies = "${buildDir}${File.separator}ext-deps"
ext.integrationModules = "${buildDir}${File.separator}classes${File.separator}java${File.separator}integration"
ext.mainClasses = sourceSets.main.java.outputDir.toString()
ext.testClasses = sourceSets.test.java.outputDir.toString()

//
// copy compile- and runtime dependencies to a single directory
//
task generateExternalDependenciesDirectory(type: Copy) {
	into "$externalDependencies"
	from configurations.compile
}

//
// compile 'org.junit.platform.commons.jpms' main sources
//

compileJava() {
	sourceCompatibility = JavaVersion.VERSION_1_9
	targetCompatibility = JavaVersion.VERSION_1_9
	options.compilerArgs = ['--module-path', "$externalDependencies"]
	classpath = files()
}

compileJava.dependsOn generateExternalDependenciesDirectory

//
// compile 'org.junit.platform.commons.jpms' test sources
//
compileTestJava {
	sourceCompatibility = JavaVersion.VERSION_1_9
	targetCompatibility = JavaVersion.VERSION_1_9
	options.compilerArgs = [
		'--module-path', String.join(File.pathSeparator, "$externalDependencies", "$mainClasses"),
		'--add-modules', "org.junit.jupiter.api",
		'--add-modules', "org.opentest4j",
		'--add-reads', "$moduleName=org.junit.jupiter.api",
		'--add-reads', "$moduleName=org.opentest4j",
		'--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
	]
	classpath = files()
}

//
// run tests for 'org.junit.platform.commons.jpms'
//
task testModule(type: Exec, dependsOn: compileTestJava) {
	executable = 'java'
	args = [
			'--module-path', String.join(File.pathSeparator, "$externalDependencies", "$mainClasses", "$testClasses"),
			'--add-modules', 'ALL-MODULE-PATH',
			'--add-opens', "$moduleName/$moduleName=org.junit.platform.commons",
			'--patch-module', "$moduleName=$testClasses",
			'--module', 'org.junit.platform.console',
			'--scan-module-path'
	]
}

check.dependsOn testModule

//
// compile and run integration tests using module 'jpms.integration' in 'test-integration'
//
task compileIntegration(type: Exec, dependsOn: compileJava) {
	executable = 'javac'
	args = [
			'-d', "$integrationModules",
			'--module-path', "$externalDependencies",
			'--module-source-path', 'src/test-integration',
			'--module', 'jpms.integration'
	]
}

task testIntegration(type: Exec, dependsOn: compileIntegration) {
	executable = 'java'
	args = [
			'--module-path', String.join(File.pathSeparator, "$externalDependencies", "$mainClasses", "$integrationModules"),
			'--add-modules', 'ALL-MODULE-PATH',
			'--module', 'org.junit.platform.console',
			'--scan-module-path'
	]
}

check.dependsOn testIntegration
